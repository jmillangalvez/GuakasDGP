{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\nimport ExpoScreenOrientation from \"./ExpoScreenOrientation\";\nimport { Orientation, OrientationLock, WebOrientationLock, WebOrientation, SizeClassIOS } from \"./ScreenOrientation.types\";\nexport { Orientation, OrientationLock, WebOrientationLock, WebOrientation, SizeClassIOS };\n\nvar _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\n\nvar _orientationChangeSubscribers = [];\nvar _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function lockAsync(orientationLock) {\n  var orientationLocks;\n  return _regeneratorRuntime.async(function lockAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoScreenOrientation.lockAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n\n        case 2:\n          orientationLocks = Object.values(OrientationLock);\n\n          if (orientationLocks.includes(orientationLock)) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n\n        case 5:\n          if (!(orientationLock === OrientationLock.OTHER)) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 7:\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.lockAsync(orientationLock));\n\n        case 9:\n          _lastOrientationLock = orientationLock;\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function lockPlatformAsync(options) {\n  var screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb, platformOrientationParam, orientations, _iterator, _step, orientation, webOrientationLocks;\n\n  return _regeneratorRuntime.async(function lockPlatformAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoScreenOrientation.lockPlatformAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n\n        case 2:\n          screenOrientationConstantAndroid = options.screenOrientationConstantAndroid, screenOrientationArrayIOS = options.screenOrientationArrayIOS, screenOrientationLockWeb = options.screenOrientationLockWeb;\n\n          if (!(Platform.OS === 'android' && screenOrientationConstantAndroid)) {\n            _context2.next = 9;\n            break;\n          }\n\n          if (!isNaN(screenOrientationConstantAndroid)) {\n            _context2.next = 6;\n            break;\n          }\n\n          throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \" + screenOrientationConstantAndroid);\n\n        case 6:\n          platformOrientationParam = screenOrientationConstantAndroid;\n          _context2.next = 28;\n          break;\n\n        case 9:\n          if (!(Platform.OS === 'ios' && screenOrientationArrayIOS)) {\n            _context2.next = 23;\n            break;\n          }\n\n          if (Array.isArray(screenOrientationArrayIOS)) {\n            _context2.next = 12;\n            break;\n          }\n\n          throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \" + screenOrientationArrayIOS);\n\n        case 12:\n          orientations = Object.values(Orientation);\n          _iterator = _createForOfIteratorHelperLoose(screenOrientationArrayIOS);\n\n        case 14:\n          if ((_step = _iterator()).done) {\n            _context2.next = 20;\n            break;\n          }\n\n          orientation = _step.value;\n\n          if (orientations.includes(orientation)) {\n            _context2.next = 18;\n            break;\n          }\n\n          throw new TypeError(\"lockPlatformAsync iOS platform: \" + orientation + \" is not a valid Orientation\");\n\n        case 18:\n          _context2.next = 14;\n          break;\n\n        case 20:\n          platformOrientationParam = screenOrientationArrayIOS;\n          _context2.next = 28;\n          break;\n\n        case 23:\n          if (!(Platform.OS === 'web' && screenOrientationLockWeb)) {\n            _context2.next = 28;\n            break;\n          }\n\n          webOrientationLocks = Object.values(WebOrientationLock);\n\n          if (webOrientationLocks.includes(screenOrientationLockWeb)) {\n            _context2.next = 27;\n            break;\n          }\n\n          throw new TypeError(\"Invalid Web Orientation Lock: \" + screenOrientationLockWeb);\n\n        case 27:\n          platformOrientationParam = screenOrientationLockWeb;\n\n        case 28:\n          if (platformOrientationParam) {\n            _context2.next = 30;\n            break;\n          }\n\n          throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n\n        case 30:\n          _context2.next = 32;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam));\n\n        case 32:\n          _lastOrientationLock = OrientationLock.OTHER;\n\n        case 33:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function unlockAsync() {\n  return _regeneratorRuntime.async(function unlockAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoScreenOrientation.lockAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT));\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getOrientationAsync() {\n  return _regeneratorRuntime.async(function getOrientationAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoScreenOrientation.getOrientationAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.getOrientationAsync());\n\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getOrientationLockAsync() {\n  return _regeneratorRuntime.async(function getOrientationLockAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoScreenOrientation.getOrientationLockAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", _lastOrientationLock);\n\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.getOrientationLockAsync());\n\n        case 4:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPlatformOrientationLockAsync() {\n  var platformOrientationLock;\n  return _regeneratorRuntime.async(function getPlatformOrientationLockAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.getPlatformOrientationLockAsync());\n\n        case 2:\n          platformOrientationLock = _context6.sent;\n\n          if (!(Platform.OS === 'android')) {\n            _context6.next = 7;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", {\n            screenOrientationConstantAndroid: platformOrientationLock\n          });\n\n        case 7:\n          if (!(Platform.OS === 'ios')) {\n            _context6.next = 11;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", {\n            screenOrientationArrayIOS: platformOrientationLock\n          });\n\n        case 11:\n          if (!(Platform.OS === 'web')) {\n            _context6.next = 15;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", {\n            screenOrientationLockWeb: platformOrientationLock\n          });\n\n        case 15:\n          return _context6.abrupt(\"return\", {});\n\n        case 16:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function supportsOrientationLockAsync(orientationLock) {\n  var orientationLocks;\n  return _regeneratorRuntime.async(function supportsOrientationLockAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExpoScreenOrientation.supportsOrientationLockAsync) {\n            _context7.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n\n        case 2:\n          orientationLocks = Object.values(OrientationLock);\n\n          if (orientationLocks.includes(orientationLock)) {\n            _context7.next = 5;\n            break;\n          }\n\n          throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n\n        case 5:\n          _context7.next = 7;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock));\n\n        case 7:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 8:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getEventName() {\n  return Platform.OS === 'ios' || Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';\n}\n\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(\"addOrientationChangeListener cannot be called with \" + listener);\n  }\n\n  var subscription = _orientationChangeEmitter.addListener(getEventName(), function _callee(update) {\n    var orientationInfo, orientationLock, orientation, _await$Promise$all, _await$Promise$all2;\n\n    return _regeneratorRuntime.async(function _callee$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(Platform.OS === 'ios' || Platform.OS === 'web')) {\n              _context8.next = 5;\n              break;\n            }\n\n            orientationLock = update.orientationLock;\n            orientationInfo = update.orientationInfo;\n            _context8.next = 12;\n            break;\n\n          case 5:\n            _context8.next = 7;\n            return _regeneratorRuntime.awrap(Promise.all([getOrientationLockAsync(), getOrientationAsync()]));\n\n          case 7:\n            _await$Promise$all = _context8.sent;\n            _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n            orientationLock = _await$Promise$all2[0];\n            orientation = _await$Promise$all2[1];\n            orientationInfo = {\n              orientation: orientation\n            };\n\n          case 12:\n            listener({\n              orientationInfo: orientationInfo,\n              orientationLock: orientationLock\n            });\n\n          case 13:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n\n  _orientationChangeSubscribers.push(subscription);\n\n  return subscription;\n}\nexport function removeOrientationChangeListeners() {\n  var i = _orientationChangeSubscribers.length;\n\n  while (i--) {\n    var subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(\"Must pass in a valid subscription\");\n  }\n\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(function (sub) {\n    return sub !== subscription;\n  });\n}","map":{"version":3,"sources":["../src/ScreenOrientation.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationLock,\n  PlatformOrientationInfo,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n  Subscription,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\n// @needsAudit\n/**\n * Lock the screen orientation to a particular `OrientationLock`.\n * @param orientationLock The orientation lock to apply. See the [`OrientationLock`](#screenorientationorientationlock)\n * enum for possible values.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_INVALID_ORIENTATION_LOCK` - An invalid [`OrientationLock`](#screenorientationorientationlock)\n *   was passed in.\n * - `ERR_SCREEN_ORIENTATION_UNSUPPORTED_ORIENTATION_LOCK` - The platform does not support the\n *   orientation lock policy.\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n *\n * @example\n * ```ts\n * async function changeScreenOrientation() {\n *   await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE_LEFT);\n * }\n * ```\n */\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\n// @needsAudit @docsMissing\n/**\n * @param options The platform specific lock to apply. See the [`PlatformOrientationInfo`](#screenorientationplatformorientationinfo)\n * object type for the different platform formats.\n * @return Returns a promise with `void` value, resolving when the orientation is set and rejecting\n * if an invalid option or value is passed.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_INVALID_ORIENTATION_LOCK` - __iOS Only.__ An invalid [`OrientationLock`](#screenorientationorientationlock)\n *   was passed in.\n * - `ERR_SCREEN_ORIENTATION_UNSUPPORTED_ORIENTATION_LOCK` - The platform does not support the\n *   orientation lock policy.\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n *\n */\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const { screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb } =\n    options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (const orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\n// @needsAudit\n/**\n * Sets the screen orientation back to the `OrientationLock.DEFAULT` policy.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n  await ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation.\n * @return Returns a promise that fulfils with an [`Orientation`](#screenorientationorientation)\n * value that reflects the current screen orientation.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_GET_ORIENTATION_LOCK` - __Android Only.__ An unknown error occurred\n *   when trying to get the system lock.\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function getOrientationAsync(): Promise<Orientation> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation lock type.\n * @return Returns a promise which fulfils with an [`OrientationLock`](#screenorientationorientationlock)\n * value.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\n// @needsAudit\n/**\n * Gets the platform specific screen orientation lock type.\n * @return Returns a promise which fulfils with a [`PlatformOrientationInfo`](#screenorientationplatformorientationinfo)\n * value.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_GET_PLATFORM_ORIENTATION_LOCK`\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\n// @needsAudit @docsMissing\n/**\n * Returns whether the [`OrientationLock`](#screenorientationorientationlock) policy is supported on\n * the device.\n * @param orientationLock\n * @return Returns a promise that resolves to a `boolean` value that reflects whether or not the\n * orientationLock is supported.\n */\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\n// @needsAudit\n/**\n * Invokes the `listener` function when the screen orientation changes from `portrait` to `landscape`\n * or from `landscape` to `portrait`. For example, it won't be invoked when screen orientation\n * change from `portrait up` to `portrait down`, but it will be called when there was a change from\n * `portrait up` to `landscape left`.\n * @param listener Each orientation update will pass an object with the new [`OrientationChangeEvent`](#screenorientationorientationchangeevent)\n * to the listener.\n */\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions`\n        // event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        let orientation;\n        [orientationLock, orientation] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n        orientationInfo = { orientation };\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\n// @needsAudit\n/**\n * Removes all listeners subscribed to orientation change updates.\n */\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\n// @needsAudit\n/**\n * Unsubscribes the listener associated with the `Subscription` object from all orientation change\n * updates.\n * @param subscription A subscription object that manages the updates passed to a listener function\n * on an orientation change.\n */\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(\n    (sub) => sub !== subscription\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}