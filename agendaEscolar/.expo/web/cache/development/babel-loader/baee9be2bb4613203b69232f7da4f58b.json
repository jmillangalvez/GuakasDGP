{"ast":null,"code":"export var Orientation;\n\n(function (Orientation) {\n  Orientation[Orientation[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  Orientation[Orientation[\"PORTRAIT_UP\"] = 1] = \"PORTRAIT_UP\";\n  Orientation[Orientation[\"PORTRAIT_DOWN\"] = 2] = \"PORTRAIT_DOWN\";\n  Orientation[Orientation[\"LANDSCAPE_LEFT\"] = 3] = \"LANDSCAPE_LEFT\";\n  Orientation[Orientation[\"LANDSCAPE_RIGHT\"] = 4] = \"LANDSCAPE_RIGHT\";\n})(Orientation || (Orientation = {}));\n\nexport var OrientationLock;\n\n(function (OrientationLock) {\n  OrientationLock[OrientationLock[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  OrientationLock[OrientationLock[\"ALL\"] = 1] = \"ALL\";\n  OrientationLock[OrientationLock[\"PORTRAIT\"] = 2] = \"PORTRAIT\";\n  OrientationLock[OrientationLock[\"PORTRAIT_UP\"] = 3] = \"PORTRAIT_UP\";\n  OrientationLock[OrientationLock[\"PORTRAIT_DOWN\"] = 4] = \"PORTRAIT_DOWN\";\n  OrientationLock[OrientationLock[\"LANDSCAPE\"] = 5] = \"LANDSCAPE\";\n  OrientationLock[OrientationLock[\"LANDSCAPE_LEFT\"] = 6] = \"LANDSCAPE_LEFT\";\n  OrientationLock[OrientationLock[\"LANDSCAPE_RIGHT\"] = 7] = \"LANDSCAPE_RIGHT\";\n  OrientationLock[OrientationLock[\"OTHER\"] = 8] = \"OTHER\";\n  OrientationLock[OrientationLock[\"UNKNOWN\"] = 9] = \"UNKNOWN\";\n})(OrientationLock || (OrientationLock = {}));\n\nexport var SizeClassIOS;\n\n(function (SizeClassIOS) {\n  SizeClassIOS[SizeClassIOS[\"REGULAR\"] = 0] = \"REGULAR\";\n  SizeClassIOS[SizeClassIOS[\"COMPACT\"] = 1] = \"COMPACT\";\n  SizeClassIOS[SizeClassIOS[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n})(SizeClassIOS || (SizeClassIOS = {}));\n\nexport var WebOrientationLock;\n\n(function (WebOrientationLock) {\n  WebOrientationLock[\"PORTRAIT_PRIMARY\"] = \"portrait-primary\";\n  WebOrientationLock[\"PORTRAIT_SECONDARY\"] = \"portrait-secondary\";\n  WebOrientationLock[\"PORTRAIT\"] = \"portrait\";\n  WebOrientationLock[\"LANDSCAPE_PRIMARY\"] = \"landscape-primary\";\n  WebOrientationLock[\"LANDSCAPE_SECONDARY\"] = \"landscape-secondary\";\n  WebOrientationLock[\"LANDSCAPE\"] = \"landscape\";\n  WebOrientationLock[\"ANY\"] = \"any\";\n  WebOrientationLock[\"NATURAL\"] = \"natural\";\n  WebOrientationLock[\"UNKNOWN\"] = \"unknown\";\n})(WebOrientationLock || (WebOrientationLock = {}));\n\nexport var WebOrientation;\n\n(function (WebOrientation) {\n  WebOrientation[\"PORTRAIT_PRIMARY\"] = \"portrait-primary\";\n  WebOrientation[\"PORTRAIT_SECONDARY\"] = \"portrait-secondary\";\n  WebOrientation[\"LANDSCAPE_PRIMARY\"] = \"landscape-primary\";\n  WebOrientation[\"LANDSCAPE_SECONDARY\"] = \"landscape-secondary\";\n})(WebOrientation || (WebOrientation = {}));","map":{"version":3,"sources":["../src/ScreenOrientation.types.ts"],"names":[],"mappings":"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","sourcesContent":["// @needsAudit\nexport enum Orientation {\n  /**\n   * An unknown screen orientation. For example, the device is flat, perhaps on a table.\n   */\n  UNKNOWN = 0,\n  /**\n   * Right-side up portrait interface orientation.\n   */\n  PORTRAIT_UP = 1,\n  /**\n   * Upside down portrait interface orientation.\n   */\n  PORTRAIT_DOWN = 2,\n  /**\n   * Left landscape interface orientation.\n   */\n  LANDSCAPE_LEFT = 3,\n  /**\n   * Right landscape interface orientation.\n   */\n  LANDSCAPE_RIGHT = 4,\n}\n\n// @needsAudit\n/**\n * An enum whose values can be passed to the [`lockAsync`](#screenorientationlockasyncorientationlock)\n * method.\n * > __Note:__ `OrientationLock.ALL` and `OrientationLock.PORTRAIT` are invalid on devices which\n * don't support `OrientationLock.PORTRAIT_DOWN`.\n */\nexport enum OrientationLock {\n  /**\n   * The default orientation. On iOS, this will allow all orientations except `Orientation.PORTRAIT_DOWN`.\n   * On Android, this lets the system decide the best orientation.\n   */\n  DEFAULT = 0,\n  /**\n   * All four possible orientations\n   */\n  ALL = 1,\n  /**\n   * Any portrait orientation.\n   */\n  PORTRAIT = 2,\n  /**\n   * Right-side up portrait only.\n   */\n  PORTRAIT_UP = 3,\n  /**\n   * Upside down portrait only.\n   */\n  PORTRAIT_DOWN = 4,\n  /**\n   * Any landscape orientation.\n   */\n  LANDSCAPE = 5,\n  /**\n   * Left landscape only.\n   */\n  LANDSCAPE_LEFT = 6,\n  /**\n   * Right landscape only.\n   */\n  LANDSCAPE_RIGHT = 7,\n  /**\n   * A platform specific orientation. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).\n   */\n  OTHER = 8,\n  /**\n   * An unknown screen orientation lock. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).\n   */\n  UNKNOWN = 9,\n}\n\n// @needsAudit\n/**\n * Each iOS device has a default set of [size classes](https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheAdaptiveModel.html)\n * that you can use as a guide when designing your interface.\n */\nexport enum SizeClassIOS {\n  REGULAR = 0,\n  COMPACT = 1,\n  UNKNOWN = 2,\n}\n\n// @needsAudit\n/**\n * An enum representing the lock policies that can be applied on the web platform, modelled after\n * the [W3C specification](https://w3c.github.io/screen-orientation/#dom-orientationlocktype).\n * These values can be applied through the [`lockPlatformAsync`](#screenorientationlockplatformasyncplatforminfo)\n * method.\n */\nexport enum WebOrientationLock {\n  PORTRAIT_PRIMARY = 'portrait-primary',\n  PORTRAIT_SECONDARY = 'portrait-secondary',\n  PORTRAIT = 'portrait',\n  LANDSCAPE_PRIMARY = 'landscape-primary',\n  LANDSCAPE_SECONDARY = 'landscape-secondary',\n  LANDSCAPE = 'landscape',\n  ANY = 'any',\n  NATURAL = 'natural',\n  UNKNOWN = 'unknown',\n}\n\n// @docsMissing\nexport enum WebOrientation {\n  PORTRAIT_PRIMARY = 'portrait-primary',\n  PORTRAIT_SECONDARY = 'portrait-secondary',\n  LANDSCAPE_PRIMARY = 'landscape-primary',\n  LANDSCAPE_SECONDARY = 'landscape-secondary',\n}\n\n// @needsAudit\nexport type PlatformOrientationInfo = {\n  /**\n   * __Android Only.__ A constant to set using the Android native [API](https://developer.android.com/reference/android/R.attr.html#screenOrientation).\n   * For example, in order to set the lock policy to [unspecified](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_UNSPECIFIED),\n   * `-1` should be passed in.\n   */\n  screenOrientationConstantAndroid?: number;\n  /**\n   * __iOS Only.__ An array of orientations to allow on the iOS platform.\n   */\n  screenOrientationArrayIOS?: Orientation[];\n  /**\n   * __Web Only.__ A web orientation lock to apply in the browser.\n   */\n  screenOrientationLockWeb?: WebOrientationLock;\n};\n\n// @needsAudit\nexport type ScreenOrientationInfo = {\n  /**\n   * The current orientation of the device.\n   */\n  orientation: Orientation;\n  /**\n   *  __iOS Only.__ The [vertical size class](https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheAdaptiveModel.html)\n   * of the device.\n   */\n  verticalSizeClass?: SizeClassIOS;\n  /**\n   *  __iOS Only.__ The [horizontal size class](https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheAdaptiveModel.html)\n   * of the device.\n   */\n  horizontalSizeClass?: SizeClassIOS;\n};\n\nexport type OrientationChangeListener = (event: OrientationChangeEvent) => void;\n\n// @needsAudit\nexport type OrientationChangeEvent = {\n  /**\n   * The current `OrientationLock` of the device.\n   */\n  orientationLock: OrientationLock;\n  /**\n   * The current `ScreenOrientationInfo` of the device.\n   */\n  orientationInfo: ScreenOrientationInfo;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}